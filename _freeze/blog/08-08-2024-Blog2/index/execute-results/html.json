{
  "hash": "9beac5809fb135d42b61981d0d3e3a11",
  "result": {
    "markdown": "---\ntitle: \"Implement Bayesian Inference using Stan in R\"\ndescription: \"Here, Stan is a probabilistic programming language written in C++ not the song by Eminem that I really like.\"\nauthor:\n  - name: Kaixing Liu\ndate: 08-08-2024\ncategories: [Bayesian Statistics, Stan, R] # self-defined categories\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat:\n  html:\n    code-copy: true\n---\n\n\nUnder the Bayesian paradigm, the statistical inference is conducted on the posterior distribution of parameters or the posterior predictive distribution of outcomes depending on the quantity of interest. In most cases, the posterior distributions are complex and known up to a constant factor (unknown) at best. It is Markov Chain Monte Carlo (MCMC) that makes the posterior estimation/inference doable and easier via simulating draws from the posterior distribution.\n\nToday, how MCMC works is not the focus. Instead, I will use several examples to illustrate conducting Bayesian inference with Stan (based on Hamiltonian MCMC) in R.\n\nFirst of all, we should install `rstan` package, the R interface to Stan, and the tools for compilation of C++ code in our computer. ([Refer to Stan official guide for details.](https://mc-stan.org/users/interfaces/rstan.html))\n\n### Example 1, beta-binomial\n\n$$\n\\theta \\sim \\text{Beta}(\\alpha,\\beta)\n$$\n\n$$\nY|\\theta \\sim \\text{Bernoulli}(\\theta)\n$$ Observed data, $\\{y_1,y_2,...,y_n\\}$ (**iid**).\n\n$$\np(\\theta|\\boldsymbol{y})\\propto p(\\boldsymbol{y}|\\theta)\\pi(\\theta)\\propto \\theta^{\\sum_i y_i}(1-\\theta)^{n-\\sum_i y_i}\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n$$\n\nTherefore,\n\n$$\n\\theta|\\boldsymbol{y}\\sim \\text{Beta}(\\alpha+\\sum_i y_i,\\beta+n-\\sum_i y_i)\n$$\n\n::: {.callout-note appearance=\"simple\"}\nThis posterior distribution is a well-known distribution and we don't bother to use Stan; it is chosen mainly to have theoretical results to compare with those obtained from Stan.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify prior and data generation mechanism\n## hyperparameters\nalpha = 1\nbeta = 1 ### thus an uninformative prior\n##\ntheta = 0.45\nn = 100\nset.seed(0808)\ny = rbinom(n, 1, prob = theta)\n```\n:::\n\n\nBefore we call Stan in R, we need to create a `.stan` file (easy to do in Rstudio) written in Stan language, pretty straightforward and concise. ([Stan Reference Manual for language details](https://mc-stan.org/docs/reference-manual/))\n\n\n::: {.cell output.var='beta_binomial_model'}\n\n```{.stan .cell-code}\ndata { // Y is the observation vector with N observations\n  int<lower=0> N;\n  array[N] int Y;\n}\n\nparameters { // theta is bounded between 0 and 1\n  real<lower=0, upper=1> theta;\n}\n\nmodel {\n  theta ~ beta(1, 1); // specify prior distribution\n  for(n in 1:N){\n    Y[n] ~ binomial(1, theta); // specify model for data\n  }\n}\n\n```\n:::\n\n\nNow we can load `rstan` package and call `stan` function to simulate a posterior sample. (For this example, executable Stan code is inserted to output a `stanmodel` for `sampling` function as input. If we create a separate `.stan` file in the same directory, use `stan` function.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores()) # parallel computing, one chain per core\nrstan_options(auto_write = TRUE) # only need one time of compilation of C++ code\ndat = list(N=n, Y=y) # consistent with data block in .stan file\nbeta_binomial_fit = sampling(beta_binomial_model, data = dat, algorithm=\"HMC\")\n```\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\nInitial points (values) for MCMC are likely to influence the time it takes for the chains to reach the stationary distribution (target posterior distribution). Thus, draws during sampling period (default, 1001-2000) of each chain (default, 4 chains) are collapsed together to form a final posterior sample.\n:::\n\nThe match between the histogram of the sample and the theoretical density curve of the posterior distribution is satisfactory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheta_post = extract(beta_binomial_fit, permuted=T)$theta\nhist(theta_post, freq = F, main = NULL, xlim = c(0,1),\n     xlab = \"theta|y\")\nlines(seq(0.1, 1, length.out = 1000), dbeta(seq(0.1, 1, length.out = 1000),\n                              shape1 = alpha+sum(y),\n                              shape2 = beta+n-sum(y)),\n      col=\"red\")\n```\n\n::: {.cell-output-display}\n![Posterior distribution of theta in beta-binomial example](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}