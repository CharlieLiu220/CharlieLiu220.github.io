[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources I find Useful",
    "section": "",
    "text": "Building your Personal Website\nQuarto in R for local construction and Github Page for deployment\nAdd Blogs to your personal website based on Quarto\n\n\nCausal Inference\nBasics of Doubly Robust Estimator (thanks to Dr. Fan Li)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is intended for Academic Communication. I plan to write blogs to record my thoughts and understandings (technical/philosophical) in statistics, data science, mathematics, and etc. Feel free to email me if you have any question."
  },
  {
    "objectID": "blog/08-06-2024-Blog1/index.html",
    "href": "blog/08-06-2024-Blog1/index.html",
    "title": "Set up NIGHT MODE for your RStudio",
    "section": "",
    "text": "As is known that there are multiple themes for RStudio, I have used the light theme for a long time since I code most of the time during the day. Yet, yesterday at 1am when I switched between Github(with Night Mode) and RStudio, my eyes were crying. Below is what I figured out to make RStudio alternate between light and dark themes according to the time.\nThe basic idea is preparing a list of themes to be used and setting options and environmental variables for your RStudio.\n\nStep 1\nInstall rsthemes package and a dozen of themes.\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"gadenbuie/rsthemes\")\n# or\ninstall.packages(\n  \"rsthemes\",\n  repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption(\"repos\"))\n) # but this package is not updated to the newest version of R so stronly recommends installment from github\n\nThen, install themes for use.\n\nrsthemes::install_rsthemes()\n# list installed themes\nrsthemes::list_rsthemes()\n# try all themes\nrsthemes::try_rsthemes()\n\n\n\nStep 2\nEdit your .Rprofile via this usethis::edit_r_profile() within a R session in RStudio. Then, your .Rprofile will pop up in source panel of RStudio. Copy this (below) and save. You can customize your preferred themes and the time to switch to night mode and back.\n\nif (interactive() && requireNamespace(\"rsthemes\", quietly = TRUE)) {\n  # Set preferred themes if not handled elsewhere..\n  rsthemes::set_theme_light(\"One Light {rsthemes}\")  # light theme\n  rsthemes::set_theme_dark(\"One Dark {rsthemes}\") # dark theme\n\n  # Whenever the R session restarts inside RStudio...\n  setHook(\"rstudio.sessionInit\", function(isNewSession) {\n    # Automatically choose the correct theme based on time of day\n    rsthemes::use_theme_auto(dark_start = \"18:00\", dark_end = \"6:00\")\n  }, action = \"append\")\n}\n\nRestart R and done. The awkward thing is that the switch works only when you restart your R session but anyway easier than switching themes manually.\nYou can refer to these for details, change RStudio theme based on time of day and manage R with .Rprofile."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kaixing Liu 刘开星",
    "section": "",
    "text": "Welcome to My Website!\nI am currently a graduate student in the Department of Biostatistics at Vanderbilt University.\n\n\nEducation\nMS in Biostatistics, 2023-2025, Vanderbilt University\nBS in Biological Science (minor in Economics and Statistics), 2018-2023, Tsinghua University\nHigh School, 2015-2018, The High School Attached to Hunan Normal Univeristy\n\n\nResearch Interest\nCausal Inference: Instrumental Variable, G-Computation, and etc.\nData Integration/Fusion: Combine Randomized Clinical Trials and Observational Studies\nFundamental Problems of Statistics and Data Visualization"
  },
  {
    "objectID": "blog/08-08-2024-Blog2/index.html",
    "href": "blog/08-08-2024-Blog2/index.html",
    "title": "Implement Bayesian Inference using Stan in R",
    "section": "",
    "text": "Under the Bayesian paradigm, the statistical inference is conducted on the posterior distribution of parameters or the posterior predictive distribution of outcomes depending on the quantity of interest. In most cases, the posterior distributions are complex and known up to a constant factor (unknown) at best. It is Markov Chain Monte Carlo (MCMC) that makes the posterior estimation/inference doable and easier via simulating draws from the posterior distribution.\nToday, how MCMC works is not the focus. Instead, I will use several examples to illustrate conducting Bayesian inference with Stan (based on Hamiltonian MCMC) in R.\nFirst of all, we should install rstan package, the R interface to Stan, and the tools for compilation of C++ code in our computer. (Refer to Stan official guide for details.)\n\nExample 1, beta-binomial\n\\[\n\\theta \\sim \\text{Beta}(\\alpha,\\beta)\n\\]\n\\[\nY|\\theta \\sim \\text{Bernoulli}(\\theta)\n\\] Observed data, \\(\\{y_1,y_2,...,y_n\\}\\) (iid).\n\\[\np(\\theta|\\boldsymbol{y})\\propto p(\\boldsymbol{y}|\\theta)\\pi(\\theta)\\propto \\theta^{\\sum_i y_i}(1-\\theta)^{n-\\sum_i y_i}\\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n\\]\nTherefore,\n\\[\n\\theta|\\boldsymbol{y}\\sim \\text{Beta}(\\alpha+\\sum_i y_i,\\beta+n-\\sum_i y_i)\n\\]\n\n\n\n\n\n\nThis posterior distribution is a well-known distribution and we don’t bother to use Stan; it is chosen mainly to have theoretical results to compare with those obtained from Stan.\n\n\n\n\n\nCode\n# specify prior and data generation mechanism\n## hyperparameters\nalpha = 1\nbeta = 1 ### thus an uninformative prior\n##\ntheta = 0.45\nn = 100\nset.seed(0808)\ny = rbinom(n, 1, prob = theta)\n\n\nBefore we call Stan in R, we need to create a .stan file (easy to do in Rstudio) written in Stan language, pretty straightforward and concise. (Stan Reference Manual for language details)\n\n\nCode\ndata { // Y is the observation vector with N observations\n  int&lt;lower=0&gt; N;\n  array[N] int Y;\n}\n\nparameters { // theta is bounded between 0 and 1\n  real&lt;lower=0, upper=1&gt; theta;\n}\n\nmodel {\n  theta ~ beta(1, 1); // specify prior distribution\n  for(n in 1:N){\n    Y[n] ~ binomial(1, theta); // specify model for data\n  }\n}\n\n\nNow we can load rstan package and call stan function to simulate a posterior sample. (For this example, executable Stan code is inserted to output a stanmodel for sampling function as input. If we create a separate .stan file in the same directory, use stan function.)\n\n\nCode\nlibrary(rstan)\noptions(mc.cores = parallel::detectCores()) # parallel computing, one chain per core\nrstan_options(auto_write = TRUE) # only need one time of compilation of C++ code\ndat = list(N=n, Y=y) # consistent with data block in .stan file\nbeta_binomial_fit = sampling(beta_binomial_model, data = dat, algorithm=\"HMC\")\n\n\n\n\n\n\n\n\nInitial points (values) for MCMC are likely to influence the time it takes for the chains to reach the stationary distribution (target posterior distribution). Thus, draws during sampling period (default, 1001-2000) of each chain (default, 4 chains) are collapsed together to form a final posterior sample.\n\n\n\nThe match between the histogram of the sample and the theoretical density curve of the posterior distribution is satisfactory.\n\n\nCode\ntheta_post = extract(beta_binomial_fit, permuted=T)$theta\nhist(theta_post, freq = F, main = NULL, xlim = c(0,1),\n     xlab = \"theta|y\")\nlines(seq(0.1, 1, length.out = 1000), dbeta(seq(0.1, 1, length.out = 1000),\n                              shape1 = alpha+sum(y),\n                              shape2 = beta+n-sum(y)),\n      col=\"red\")\n\n\n\n\n\nPosterior distribution of theta in beta-binomial example\n\n\n\n\n\n\nExample 2, normal-normal\n\\[\n\\mu\\sim N(\\mu_0, \\sigma_0^2)\n\\]\n\\[\nY|\\mu,\\sigma^2\\sim N(\\mu, \\sigma^2)\n\\]\n\\[\np(\\mu|\\boldsymbol y)\\propto \\exp(-\\frac{(\\mu-\\mu_0)^2}{2\\cdot \\sigma_0^2})\\exp(-\\frac{\\sum_i (y_i-\\mu)^2}{2\\cdot \\sigma^2})\n\\]\nTherefore,\n\\[\n\\mu|\\boldsymbol {y}\\sim N(\\frac{\\frac{1}{\\sigma_0^2}\\mu_0+\\frac{n}{\\sigma^2}\\bar y}{\\frac{1}{\\sigma_0^2}+\\frac{n}{\\sigma^2}},\\frac{\\sigma_0^2\\sigma^2}{n\\sigma_0^2+\\sigma^2})\n\\]\n\n\nCode\n# set prior and generate data\nmu_0 = 0\nsigma_0 = 1\nmu = 1.5\nset.seed(0808)\ny_normal = rnorm(n, mean = mu, sd = 5)\ndat_normal = list(N=n, Y=y_normal)\n\n\n(Refer to this for functions defined in Stan)\n\n\nCode\ndata { // Y is the observation vector with N observations\n  int&lt;lower=0&gt; N;\n  array[N] real Y;\n}\n\nparameters { // mu is unbounded\n  real mu;\n}\n\nmodel {\n  target += normal_lpdf(mu|0, 1);\n  target += normal_lpdf(Y|mu, 5);\n}\n\n\n\n\nCode\n# MCMC and plot\nnormal_normal_fit = sampling(normal_normal_model, data = dat_normal, iter=2000, chains=4)\nmu_post = extract(normal_normal_fit, permuted=T)$mu\nhist(mu_post, freq = F, main = NULL,\n     xlab = \"mu|y\", xlim=c(-1,4))\nlines(seq(-1, 4, length.out = 1000), dnorm(seq(-1, 4, length.out = 1000),\n                              mean = (mu_0/sigma_0^2+sum(y_normal)/5^2)/(n/5^2+1/sigma_0^2),\n                              sd = sqrt(5^2*sigma_0^2/(n*sigma_0^2+5^2))),\n      col=\"red\")\n\n\n\n\n\nPosterior distribution of mu in normal-normal example\n\n\n\n\n\n\nExample 3, Dirichlet-multinomial\nThis is the multivariate-extension of beta-binomial model.\n\\[\n(\\theta_1,\\theta_2,...,\\theta_K)\\sim \\text{Dir}(\\alpha_1,\\alpha_2,...,\\alpha_K),\\ \\text{where} \\sum_k \\theta_k=1\\ \\text{and}\\ \\theta_k\\geq 0\\ \\forall k\n\\]\n\\[\n(Y_1,Y_2,...,Y_K)\\sim \\text{Multinomial}(n,\\boldsymbol {\\theta}),\\ \\text{where} \\sum_i Y_i=n\n\\]\n\\[\np(\\boldsymbol{\\theta}|\\boldsymbol{y})\\propto \\Pi_k \\theta_k^{y_k}\\Pi_k \\theta_k^{\\alpha_k-1}\n\\]\nTherefore,\n\\[\n\\boldsymbol{\\theta}|\\boldsymbol{y}\\sim \\text{Dir}(\\alpha_1',\\alpha_2',...,\\alpha_K'), \\text{where}\\ \\alpha_k'=\\alpha_k+y_k\\ \\forall k\n\\]\nIt can be shown that the marginal distribution of a Dirichlet distribution is a beta distribution, for example, \\(\\theta_1|\\boldsymbol {y}\\sim \\text{Beta}(\\alpha_1',\\sum_k\\alpha_k'-\\alpha_1')\\).\nHere, we consider \\(5\\) categories and a uniform prior with \\(\\alpha_k=1\\ \\forall k\\).\n\n\nCode\n# set prior and generate data\nAlpha = c(alpha1 = 1, alpha2 = 1, alpha3 = 1,\n          alpha4 = 1, alpha5 = 1)\nTheta = c(theta1 = 0.25, theta2 = 0.15, theta3 = 0.05,\n          theta4 = 0.35, theta5 = 0.20)\nset.seed(0808)\ny_multinomial = as.vector(rmultinom(1, n, prob = Theta))\n\n\n\n\nCode\ndata { // Y is the observation vector with K categories\n  int&lt;lower=3&gt; K;\n  array[K] int Y;\n}\n\nparameters { // Thetas are bounded and sum to 1 \n  simplex[K] Theta;\n}\n\nmodel {\n  Theta ~ dirichlet(rep_vector(1, K));\n  Y ~ multinomial(Theta);\n}\n\n\n\n\nCode\n# MCMC and plot\ndat_multinomial = list(K=5, Y=y_multinomial)\ndirichlet_multinomial_fit = sampling(dirichlet_multinomial_model,\n                                     data = dat_multinomial)\n\n##\nTheta1_post = unlist(extract(dirichlet_multinomial_fit, pars=\"Theta[1]\",\n                      permuted = T))\nhist(Theta1_post, freq = F, main = NULL, xlim = c(0,1),\n     xlab = \"theta[1]|y\")\nlines(seq(0, 1, length.out = 1000), dbeta(seq(0, 1, length.out = 1000),\n                              shape1 = Alpha[\"alpha1\"]+y_multinomial[1],\n                              shape2 = sum(Alpha[-1]+y_multinomial[-1])),\n      col=\"red\")\n\n\n\n\n\nPosterior distribution of thetas in dirichlet-multinomial example\n\n\n\n\nCode\n## \nTheta2_post = unlist(extract(dirichlet_multinomial_fit, pars=\"Theta[2]\",\n                      permuted = T))\nhist(Theta2_post, freq = F, main = NULL, xlim = c(0,1),\n     xlab = \"theta[2]|y\")\nlines(seq(0, 1, length.out = 1000), dbeta(seq(0, 1, length.out = 1000),\n                              shape1 = Alpha[\"alpha2\"]+y_multinomial[2],\n                              shape2 = sum(Alpha[-2]+y_multinomial[-2])),\n      col=\"red\")\n\n\n\n\n\nPosterior distribution of thetas in dirichlet-multinomial example\n\n\n\n\nCode\n##\nTheta3_post = unlist(extract(dirichlet_multinomial_fit, pars=\"Theta[3]\",\n                      permuted = T))\nhist(Theta3_post, freq = F, main = NULL, xlim = c(0,1),\n     xlab = \"theta[3]|y\")\nlines(seq(0, 1, length.out = 1000), dbeta(seq(0, 1, length.out = 1000),\n                              shape1 = Alpha[\"alpha3\"]+y_multinomial[3],\n                              shape2 = sum(Alpha[-3]+y_multinomial[-3])),\n      col=\"red\")\n\n\n\n\n\nPosterior distribution of thetas in dirichlet-multinomial example\n\n\n\n\nCode\n##\nTheta4_post = unlist(extract(dirichlet_multinomial_fit, pars=\"Theta[4]\",\n                      permuted = T))\nhist(Theta4_post, freq = F, main = NULL, xlim = c(0,1),\n     xlab = \"theta[4]|y\")\nlines(seq(0, 1, length.out = 1000), dbeta(seq(0, 1, length.out = 1000),\n                              shape1 = Alpha[\"alpha4\"]+y_multinomial[4],\n                              shape2 = sum(Alpha[-4]+y_multinomial[-4])),\n      col=\"red\")\n\n\n\n\n\nPosterior distribution of thetas in dirichlet-multinomial example\n\n\n\n\n\n\nExample 4, linear regression under"
  },
  {
    "objectID": "blogs.html",
    "href": "blogs.html",
    "title": "Blog",
    "section": "",
    "text": "Implement Bayesian Inference using Stan in R\n\n\n\n\n\n\n\nBayesian Statistics\n\n\nStan\n\n\nR\n\n\n\n\nHere, Stan is a probabilistic programming language written in C++ not the song by Eminem that I really like.\n\n\n\n\n\n\nAug 8, 2024\n\n\nKaixing Liu\n\n\n\n\n\n\n  \n\n\n\n\nSet up NIGHT MODE for your RStudio\n\n\n\n\n\n\n\nRStudio\n\n\n\n\nYou will not be flashed when coding in the middle night with this NIGHT MODE.\n\n\n\n\n\n\nAug 6, 2024\n\n\nKaixing Liu\n\n\n\n\n\n\nNo matching items"
  }
]